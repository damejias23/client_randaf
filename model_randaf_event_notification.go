/*
Nrandaf_EventExposure

RANDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package randaf

import (
	"encoding/json"
)

// RandafEventNotification Data within a RANDAF Event Notification request
type RandafEventNotification struct {
	ReportEvent *RandafEventReport `json:"reportEvent,omitempty"`
	EventSubsSyncInfo *RandafEventSubsSyncInfo `json:"eventSubsSyncInfo,omitempty"`
}

// NewRandafEventNotification instantiates a new RandafEventNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandafEventNotification() *RandafEventNotification {
	this := RandafEventNotification{}
	return &this
}

// NewRandafEventNotificationWithDefaults instantiates a new RandafEventNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandafEventNotificationWithDefaults() *RandafEventNotification {
	this := RandafEventNotification{}
	return &this
}

// GetReportEvent returns the ReportEvent field value if set, zero value otherwise.
func (o *RandafEventNotification) GetReportEvent() RandafEventReport {
	if o == nil || o.ReportEvent == nil {
		var ret RandafEventReport
		return ret
	}
	return *o.ReportEvent
}

// GetReportEventOk returns a tuple with the ReportEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafEventNotification) GetReportEventOk() (*RandafEventReport, bool) {
	if o == nil || o.ReportEvent == nil {
		return nil, false
	}
	return o.ReportEvent, true
}

// HasReportEvent returns a boolean if a field has been set.
func (o *RandafEventNotification) HasReportEvent() bool {
	if o != nil && o.ReportEvent != nil {
		return true
	}

	return false
}

// SetReportEvent gets a reference to the given RandafEventReport and assigns it to the ReportEvent field.
func (o *RandafEventNotification) SetReportEvent(v RandafEventReport) {
	o.ReportEvent = &v
}

// GetEventSubsSyncInfo returns the EventSubsSyncInfo field value if set, zero value otherwise.
func (o *RandafEventNotification) GetEventSubsSyncInfo() RandafEventSubsSyncInfo {
	if o == nil || o.EventSubsSyncInfo == nil {
		var ret RandafEventSubsSyncInfo
		return ret
	}
	return *o.EventSubsSyncInfo
}

// GetEventSubsSyncInfoOk returns a tuple with the EventSubsSyncInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafEventNotification) GetEventSubsSyncInfoOk() (*RandafEventSubsSyncInfo, bool) {
	if o == nil || o.EventSubsSyncInfo == nil {
		return nil, false
	}
	return o.EventSubsSyncInfo, true
}

// HasEventSubsSyncInfo returns a boolean if a field has been set.
func (o *RandafEventNotification) HasEventSubsSyncInfo() bool {
	if o != nil && o.EventSubsSyncInfo != nil {
		return true
	}

	return false
}

// SetEventSubsSyncInfo gets a reference to the given RandafEventSubsSyncInfo and assigns it to the EventSubsSyncInfo field.
func (o *RandafEventNotification) SetEventSubsSyncInfo(v RandafEventSubsSyncInfo) {
	o.EventSubsSyncInfo = &v
}

func (o RandafEventNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReportEvent != nil {
		toSerialize["reportEvent"] = o.ReportEvent
	}
	if o.EventSubsSyncInfo != nil {
		toSerialize["eventSubsSyncInfo"] = o.EventSubsSyncInfo
	}
	return json.Marshal(toSerialize)
}

type NullableRandafEventNotification struct {
	value *RandafEventNotification
	isSet bool
}

func (v NullableRandafEventNotification) Get() *RandafEventNotification {
	return v.value
}

func (v *NullableRandafEventNotification) Set(val *RandafEventNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableRandafEventNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableRandafEventNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandafEventNotification(val *RandafEventNotification) *NullableRandafEventNotification {
	return &NullableRandafEventNotification{value: val, isSet: true}
}

func (v NullableRandafEventNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandafEventNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


