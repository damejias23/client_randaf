/*
Nrandaf_EventExposure

RANDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package randaf

import (
	"encoding/json"
	"time"
)

// RandafEvent Describes an event to be subscribed
type RandafEvent struct {
	Type RandafEventTypeAnyOf `json:"type"`
	MaxReports *int32 `json:"maxReports,omitempty"`
	// indicating a time in seconds.
	MaxResponseTime *int32 `json:"maxResponseTime,omitempty"`
	// indicating a time in seconds.
	MinInterval *int32 `json:"minInterval,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	NextReport *time.Time `json:"nextReport,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	NextPeriodicReportTime *time.Time `json:"nextPeriodicReportTime,omitempty"`
}

// NewRandafEvent instantiates a new RandafEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandafEvent(type_ RandafEventTypeAnyOf) *RandafEvent {
	this := RandafEvent{}
	this.Type = type_
	return &this
}

// NewRandafEventWithDefaults instantiates a new RandafEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandafEventWithDefaults() *RandafEvent {
	this := RandafEvent{}
	return &this
}

// GetType returns the Type field value
func (o *RandafEvent) GetType() RandafEventTypeAnyOf {
	if o == nil {
		var ret RandafEventTypeAnyOf
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RandafEvent) GetTypeOk() (*RandafEventTypeAnyOf, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RandafEvent) SetType(v RandafEventTypeAnyOf) {
	o.Type = v
}

// GetMaxReports returns the MaxReports field value if set, zero value otherwise.
func (o *RandafEvent) GetMaxReports() int32 {
	if o == nil || o.MaxReports == nil {
		var ret int32
		return ret
	}
	return *o.MaxReports
}

// GetMaxReportsOk returns a tuple with the MaxReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafEvent) GetMaxReportsOk() (*int32, bool) {
	if o == nil || o.MaxReports == nil {
		return nil, false
	}
	return o.MaxReports, true
}

// HasMaxReports returns a boolean if a field has been set.
func (o *RandafEvent) HasMaxReports() bool {
	if o != nil && o.MaxReports != nil {
		return true
	}

	return false
}

// SetMaxReports gets a reference to the given int32 and assigns it to the MaxReports field.
func (o *RandafEvent) SetMaxReports(v int32) {
	o.MaxReports = &v
}

// GetMaxResponseTime returns the MaxResponseTime field value if set, zero value otherwise.
func (o *RandafEvent) GetMaxResponseTime() int32 {
	if o == nil || o.MaxResponseTime == nil {
		var ret int32
		return ret
	}
	return *o.MaxResponseTime
}

// GetMaxResponseTimeOk returns a tuple with the MaxResponseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafEvent) GetMaxResponseTimeOk() (*int32, bool) {
	if o == nil || o.MaxResponseTime == nil {
		return nil, false
	}
	return o.MaxResponseTime, true
}

// HasMaxResponseTime returns a boolean if a field has been set.
func (o *RandafEvent) HasMaxResponseTime() bool {
	if o != nil && o.MaxResponseTime != nil {
		return true
	}

	return false
}

// SetMaxResponseTime gets a reference to the given int32 and assigns it to the MaxResponseTime field.
func (o *RandafEvent) SetMaxResponseTime(v int32) {
	o.MaxResponseTime = &v
}

// GetMinInterval returns the MinInterval field value if set, zero value otherwise.
func (o *RandafEvent) GetMinInterval() int32 {
	if o == nil || o.MinInterval == nil {
		var ret int32
		return ret
	}
	return *o.MinInterval
}

// GetMinIntervalOk returns a tuple with the MinInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafEvent) GetMinIntervalOk() (*int32, bool) {
	if o == nil || o.MinInterval == nil {
		return nil, false
	}
	return o.MinInterval, true
}

// HasMinInterval returns a boolean if a field has been set.
func (o *RandafEvent) HasMinInterval() bool {
	if o != nil && o.MinInterval != nil {
		return true
	}

	return false
}

// SetMinInterval gets a reference to the given int32 and assigns it to the MinInterval field.
func (o *RandafEvent) SetMinInterval(v int32) {
	o.MinInterval = &v
}

// GetNextReport returns the NextReport field value if set, zero value otherwise.
func (o *RandafEvent) GetNextReport() time.Time {
	if o == nil || o.NextReport == nil {
		var ret time.Time
		return ret
	}
	return *o.NextReport
}

// GetNextReportOk returns a tuple with the NextReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafEvent) GetNextReportOk() (*time.Time, bool) {
	if o == nil || o.NextReport == nil {
		return nil, false
	}
	return o.NextReport, true
}

// HasNextReport returns a boolean if a field has been set.
func (o *RandafEvent) HasNextReport() bool {
	if o != nil && o.NextReport != nil {
		return true
	}

	return false
}

// SetNextReport gets a reference to the given time.Time and assigns it to the NextReport field.
func (o *RandafEvent) SetNextReport(v time.Time) {
	o.NextReport = &v
}

// GetNextPeriodicReportTime returns the NextPeriodicReportTime field value if set, zero value otherwise.
func (o *RandafEvent) GetNextPeriodicReportTime() time.Time {
	if o == nil || o.NextPeriodicReportTime == nil {
		var ret time.Time
		return ret
	}
	return *o.NextPeriodicReportTime
}

// GetNextPeriodicReportTimeOk returns a tuple with the NextPeriodicReportTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafEvent) GetNextPeriodicReportTimeOk() (*time.Time, bool) {
	if o == nil || o.NextPeriodicReportTime == nil {
		return nil, false
	}
	return o.NextPeriodicReportTime, true
}

// HasNextPeriodicReportTime returns a boolean if a field has been set.
func (o *RandafEvent) HasNextPeriodicReportTime() bool {
	if o != nil && o.NextPeriodicReportTime != nil {
		return true
	}

	return false
}

// SetNextPeriodicReportTime gets a reference to the given time.Time and assigns it to the NextPeriodicReportTime field.
func (o *RandafEvent) SetNextPeriodicReportTime(v time.Time) {
	o.NextPeriodicReportTime = &v
}

func (o RandafEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.MaxReports != nil {
		toSerialize["maxReports"] = o.MaxReports
	}
	if o.MaxResponseTime != nil {
		toSerialize["maxResponseTime"] = o.MaxResponseTime
	}
	if o.MinInterval != nil {
		toSerialize["minInterval"] = o.MinInterval
	}
	if o.NextReport != nil {
		toSerialize["nextReport"] = o.NextReport
	}
	if o.NextPeriodicReportTime != nil {
		toSerialize["nextPeriodicReportTime"] = o.NextPeriodicReportTime
	}
	return json.Marshal(toSerialize)
}

type NullableRandafEvent struct {
	value *RandafEvent
	isSet bool
}

func (v NullableRandafEvent) Get() *RandafEvent {
	return v.value
}

func (v *NullableRandafEvent) Set(val *RandafEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRandafEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRandafEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandafEvent(val *RandafEvent) *NullableRandafEvent {
	return &NullableRandafEvent{value: val, isSet: true}
}

func (v NullableRandafEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandafEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


