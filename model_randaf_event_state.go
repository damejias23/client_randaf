/*
Nrandaf_EventExposure

RANDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package randaf

import (
	"encoding/json"
)

// RandafEventState Represents the state of a subscribed event
type RandafEventState struct {
	Active bool `json:"active"`
	RemainReports *int32 `json:"remainReports,omitempty"`
	// indicating a time in seconds.
	RemainDuration *int32 `json:"remainDuration,omitempty"`
}

// NewRandafEventState instantiates a new RandafEventState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandafEventState(active bool) *RandafEventState {
	this := RandafEventState{}
	this.Active = active
	return &this
}

// NewRandafEventStateWithDefaults instantiates a new RandafEventState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandafEventStateWithDefaults() *RandafEventState {
	this := RandafEventState{}
	return &this
}

// GetActive returns the Active field value
func (o *RandafEventState) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *RandafEventState) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *RandafEventState) SetActive(v bool) {
	o.Active = v
}

// GetRemainReports returns the RemainReports field value if set, zero value otherwise.
func (o *RandafEventState) GetRemainReports() int32 {
	if o == nil || o.RemainReports == nil {
		var ret int32
		return ret
	}
	return *o.RemainReports
}

// GetRemainReportsOk returns a tuple with the RemainReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafEventState) GetRemainReportsOk() (*int32, bool) {
	if o == nil || o.RemainReports == nil {
		return nil, false
	}
	return o.RemainReports, true
}

// HasRemainReports returns a boolean if a field has been set.
func (o *RandafEventState) HasRemainReports() bool {
	if o != nil && o.RemainReports != nil {
		return true
	}

	return false
}

// SetRemainReports gets a reference to the given int32 and assigns it to the RemainReports field.
func (o *RandafEventState) SetRemainReports(v int32) {
	o.RemainReports = &v
}

// GetRemainDuration returns the RemainDuration field value if set, zero value otherwise.
func (o *RandafEventState) GetRemainDuration() int32 {
	if o == nil || o.RemainDuration == nil {
		var ret int32
		return ret
	}
	return *o.RemainDuration
}

// GetRemainDurationOk returns a tuple with the RemainDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafEventState) GetRemainDurationOk() (*int32, bool) {
	if o == nil || o.RemainDuration == nil {
		return nil, false
	}
	return o.RemainDuration, true
}

// HasRemainDuration returns a boolean if a field has been set.
func (o *RandafEventState) HasRemainDuration() bool {
	if o != nil && o.RemainDuration != nil {
		return true
	}

	return false
}

// SetRemainDuration gets a reference to the given int32 and assigns it to the RemainDuration field.
func (o *RandafEventState) SetRemainDuration(v int32) {
	o.RemainDuration = &v
}

func (o RandafEventState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["active"] = o.Active
	}
	if o.RemainReports != nil {
		toSerialize["remainReports"] = o.RemainReports
	}
	if o.RemainDuration != nil {
		toSerialize["remainDuration"] = o.RemainDuration
	}
	return json.Marshal(toSerialize)
}

type NullableRandafEventState struct {
	value *RandafEventState
	isSet bool
}

func (v NullableRandafEventState) Get() *RandafEventState {
	return v.value
}

func (v *NullableRandafEventState) Set(val *RandafEventState) {
	v.value = val
	v.isSet = true
}

func (v NullableRandafEventState) IsSet() bool {
	return v.isSet
}

func (v *NullableRandafEventState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandafEventState(val *RandafEventState) *NullableRandafEventState {
	return &NullableRandafEventState{value: val, isSet: true}
}

func (v NullableRandafEventState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandafEventState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


