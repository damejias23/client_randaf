/*
Nrandaf_EventExposure

RANDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package randaf

import (
	"encoding/json"
)

// PhyRANLevelInformation Represents load level information of a given NF instance.
type PhyRANLevelInformation struct {
	// Cell identifier to which the UE is connected 
	CellId *int32 `json:"cell_id,omitempty"`
	// Cell name indicator
	CellName *string `json:"cell_name,omitempty"`
	// PLMN indicator
	Plmn *string `json:"plmn,omitempty"`
	// Uplink bitrate 
	BitrateUplink *int32 `json:"bitrate_uplink,omitempty"`
	// Downlink bitrate
	BitrateDownlink *int32 `json:"bitrate_downlink,omitempty"`
	// Uplink transmission
	TransmissionUplink *int32 `json:"transmission_uplink,omitempty"`
	// Downlink transmission
	TransmissionDownlink *int32 `json:"transmission_downlink,omitempty"`
	// Uplink retransmissions
	RetransmissionUplink *int32 `json:"retransmission_uplink,omitempty"`
	// Downlink retransmissions
	RetransmissionDownlink *int32 `json:"retransmission_downlink,omitempty"`
}

// NewPhyRANLevelInformation instantiates a new PhyRANLevelInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhyRANLevelInformation() *PhyRANLevelInformation {
	this := PhyRANLevelInformation{}
	return &this
}

// NewPhyRANLevelInformationWithDefaults instantiates a new PhyRANLevelInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhyRANLevelInformationWithDefaults() *PhyRANLevelInformation {
	this := PhyRANLevelInformation{}
	return &this
}

// GetCellId returns the CellId field value if set, zero value otherwise.
func (o *PhyRANLevelInformation) GetCellId() int32 {
	if o == nil || o.CellId == nil {
		var ret int32
		return ret
	}
	return *o.CellId
}

// GetCellIdOk returns a tuple with the CellId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhyRANLevelInformation) GetCellIdOk() (*int32, bool) {
	if o == nil || o.CellId == nil {
		return nil, false
	}
	return o.CellId, true
}

// HasCellId returns a boolean if a field has been set.
func (o *PhyRANLevelInformation) HasCellId() bool {
	if o != nil && o.CellId != nil {
		return true
	}

	return false
}

// SetCellId gets a reference to the given int32 and assigns it to the CellId field.
func (o *PhyRANLevelInformation) SetCellId(v int32) {
	o.CellId = &v
}

// GetCellName returns the CellName field value if set, zero value otherwise.
func (o *PhyRANLevelInformation) GetCellName() string {
	if o == nil || o.CellName == nil {
		var ret string
		return ret
	}
	return *o.CellName
}

// GetCellNameOk returns a tuple with the CellName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhyRANLevelInformation) GetCellNameOk() (*string, bool) {
	if o == nil || o.CellName == nil {
		return nil, false
	}
	return o.CellName, true
}

// HasCellName returns a boolean if a field has been set.
func (o *PhyRANLevelInformation) HasCellName() bool {
	if o != nil && o.CellName != nil {
		return true
	}

	return false
}

// SetCellName gets a reference to the given string and assigns it to the CellName field.
func (o *PhyRANLevelInformation) SetCellName(v string) {
	o.CellName = &v
}

// GetPlmn returns the Plmn field value if set, zero value otherwise.
func (o *PhyRANLevelInformation) GetPlmn() string {
	if o == nil || o.Plmn == nil {
		var ret string
		return ret
	}
	return *o.Plmn
}

// GetPlmnOk returns a tuple with the Plmn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhyRANLevelInformation) GetPlmnOk() (*string, bool) {
	if o == nil || o.Plmn == nil {
		return nil, false
	}
	return o.Plmn, true
}

// HasPlmn returns a boolean if a field has been set.
func (o *PhyRANLevelInformation) HasPlmn() bool {
	if o != nil && o.Plmn != nil {
		return true
	}

	return false
}

// SetPlmn gets a reference to the given string and assigns it to the Plmn field.
func (o *PhyRANLevelInformation) SetPlmn(v string) {
	o.Plmn = &v
}

// GetBitrateUplink returns the BitrateUplink field value if set, zero value otherwise.
func (o *PhyRANLevelInformation) GetBitrateUplink() int32 {
	if o == nil || o.BitrateUplink == nil {
		var ret int32
		return ret
	}
	return *o.BitrateUplink
}

// GetBitrateUplinkOk returns a tuple with the BitrateUplink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhyRANLevelInformation) GetBitrateUplinkOk() (*int32, bool) {
	if o == nil || o.BitrateUplink == nil {
		return nil, false
	}
	return o.BitrateUplink, true
}

// HasBitrateUplink returns a boolean if a field has been set.
func (o *PhyRANLevelInformation) HasBitrateUplink() bool {
	if o != nil && o.BitrateUplink != nil {
		return true
	}

	return false
}

// SetBitrateUplink gets a reference to the given int32 and assigns it to the BitrateUplink field.
func (o *PhyRANLevelInformation) SetBitrateUplink(v int32) {
	o.BitrateUplink = &v
}

// GetBitrateDownlink returns the BitrateDownlink field value if set, zero value otherwise.
func (o *PhyRANLevelInformation) GetBitrateDownlink() int32 {
	if o == nil || o.BitrateDownlink == nil {
		var ret int32
		return ret
	}
	return *o.BitrateDownlink
}

// GetBitrateDownlinkOk returns a tuple with the BitrateDownlink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhyRANLevelInformation) GetBitrateDownlinkOk() (*int32, bool) {
	if o == nil || o.BitrateDownlink == nil {
		return nil, false
	}
	return o.BitrateDownlink, true
}

// HasBitrateDownlink returns a boolean if a field has been set.
func (o *PhyRANLevelInformation) HasBitrateDownlink() bool {
	if o != nil && o.BitrateDownlink != nil {
		return true
	}

	return false
}

// SetBitrateDownlink gets a reference to the given int32 and assigns it to the BitrateDownlink field.
func (o *PhyRANLevelInformation) SetBitrateDownlink(v int32) {
	o.BitrateDownlink = &v
}

// GetTransmissionUplink returns the TransmissionUplink field value if set, zero value otherwise.
func (o *PhyRANLevelInformation) GetTransmissionUplink() int32 {
	if o == nil || o.TransmissionUplink == nil {
		var ret int32
		return ret
	}
	return *o.TransmissionUplink
}

// GetTransmissionUplinkOk returns a tuple with the TransmissionUplink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhyRANLevelInformation) GetTransmissionUplinkOk() (*int32, bool) {
	if o == nil || o.TransmissionUplink == nil {
		return nil, false
	}
	return o.TransmissionUplink, true
}

// HasTransmissionUplink returns a boolean if a field has been set.
func (o *PhyRANLevelInformation) HasTransmissionUplink() bool {
	if o != nil && o.TransmissionUplink != nil {
		return true
	}

	return false
}

// SetTransmissionUplink gets a reference to the given int32 and assigns it to the TransmissionUplink field.
func (o *PhyRANLevelInformation) SetTransmissionUplink(v int32) {
	o.TransmissionUplink = &v
}

// GetTransmissionDownlink returns the TransmissionDownlink field value if set, zero value otherwise.
func (o *PhyRANLevelInformation) GetTransmissionDownlink() int32 {
	if o == nil || o.TransmissionDownlink == nil {
		var ret int32
		return ret
	}
	return *o.TransmissionDownlink
}

// GetTransmissionDownlinkOk returns a tuple with the TransmissionDownlink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhyRANLevelInformation) GetTransmissionDownlinkOk() (*int32, bool) {
	if o == nil || o.TransmissionDownlink == nil {
		return nil, false
	}
	return o.TransmissionDownlink, true
}

// HasTransmissionDownlink returns a boolean if a field has been set.
func (o *PhyRANLevelInformation) HasTransmissionDownlink() bool {
	if o != nil && o.TransmissionDownlink != nil {
		return true
	}

	return false
}

// SetTransmissionDownlink gets a reference to the given int32 and assigns it to the TransmissionDownlink field.
func (o *PhyRANLevelInformation) SetTransmissionDownlink(v int32) {
	o.TransmissionDownlink = &v
}

// GetRetransmissionUplink returns the RetransmissionUplink field value if set, zero value otherwise.
func (o *PhyRANLevelInformation) GetRetransmissionUplink() int32 {
	if o == nil || o.RetransmissionUplink == nil {
		var ret int32
		return ret
	}
	return *o.RetransmissionUplink
}

// GetRetransmissionUplinkOk returns a tuple with the RetransmissionUplink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhyRANLevelInformation) GetRetransmissionUplinkOk() (*int32, bool) {
	if o == nil || o.RetransmissionUplink == nil {
		return nil, false
	}
	return o.RetransmissionUplink, true
}

// HasRetransmissionUplink returns a boolean if a field has been set.
func (o *PhyRANLevelInformation) HasRetransmissionUplink() bool {
	if o != nil && o.RetransmissionUplink != nil {
		return true
	}

	return false
}

// SetRetransmissionUplink gets a reference to the given int32 and assigns it to the RetransmissionUplink field.
func (o *PhyRANLevelInformation) SetRetransmissionUplink(v int32) {
	o.RetransmissionUplink = &v
}

// GetRetransmissionDownlink returns the RetransmissionDownlink field value if set, zero value otherwise.
func (o *PhyRANLevelInformation) GetRetransmissionDownlink() int32 {
	if o == nil || o.RetransmissionDownlink == nil {
		var ret int32
		return ret
	}
	return *o.RetransmissionDownlink
}

// GetRetransmissionDownlinkOk returns a tuple with the RetransmissionDownlink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhyRANLevelInformation) GetRetransmissionDownlinkOk() (*int32, bool) {
	if o == nil || o.RetransmissionDownlink == nil {
		return nil, false
	}
	return o.RetransmissionDownlink, true
}

// HasRetransmissionDownlink returns a boolean if a field has been set.
func (o *PhyRANLevelInformation) HasRetransmissionDownlink() bool {
	if o != nil && o.RetransmissionDownlink != nil {
		return true
	}

	return false
}

// SetRetransmissionDownlink gets a reference to the given int32 and assigns it to the RetransmissionDownlink field.
func (o *PhyRANLevelInformation) SetRetransmissionDownlink(v int32) {
	o.RetransmissionDownlink = &v
}

func (o PhyRANLevelInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CellId != nil {
		toSerialize["cell_id"] = o.CellId
	}
	if o.CellName != nil {
		toSerialize["cell_name"] = o.CellName
	}
	if o.Plmn != nil {
		toSerialize["plmn"] = o.Plmn
	}
	if o.BitrateUplink != nil {
		toSerialize["bitrate_uplink"] = o.BitrateUplink
	}
	if o.BitrateDownlink != nil {
		toSerialize["bitrate_downlink"] = o.BitrateDownlink
	}
	if o.TransmissionUplink != nil {
		toSerialize["transmission_uplink"] = o.TransmissionUplink
	}
	if o.TransmissionDownlink != nil {
		toSerialize["transmission_downlink"] = o.TransmissionDownlink
	}
	if o.RetransmissionUplink != nil {
		toSerialize["retransmission_uplink"] = o.RetransmissionUplink
	}
	if o.RetransmissionDownlink != nil {
		toSerialize["retransmission_downlink"] = o.RetransmissionDownlink
	}
	return json.Marshal(toSerialize)
}

type NullablePhyRANLevelInformation struct {
	value *PhyRANLevelInformation
	isSet bool
}

func (v NullablePhyRANLevelInformation) Get() *PhyRANLevelInformation {
	return v.value
}

func (v *NullablePhyRANLevelInformation) Set(val *PhyRANLevelInformation) {
	v.value = val
	v.isSet = true
}

func (v NullablePhyRANLevelInformation) IsSet() bool {
	return v.isSet
}

func (v *NullablePhyRANLevelInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhyRANLevelInformation(val *PhyRANLevelInformation) *NullablePhyRANLevelInformation {
	return &NullablePhyRANLevelInformation{value: val, isSet: true}
}

func (v NullablePhyRANLevelInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhyRANLevelInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


