/*
Nrandaf_EventExposure

RANDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package randaf

import (
	"encoding/json"
	"fmt"
)

// RandafEventTypeAnyOf the model 'RandafEventTypeAnyOf'
type RandafEventTypeAnyOf string

// List of RandafEventType_anyOf
const (
	PHY_LEVEL_INFORMATION RandafEventTypeAnyOf = "PHY_LEVEL_INFORMATION"
)

// All allowed values of RandafEventTypeAnyOf enum
var AllowedRandafEventTypeAnyOfEnumValues = []RandafEventTypeAnyOf{
	"PHY_LEVEL_INFORMATION",
}

func (v *RandafEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RandafEventTypeAnyOf(value)
	for _, existing := range AllowedRandafEventTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RandafEventTypeAnyOf", value)
}

// NewRandafEventTypeAnyOfFromValue returns a pointer to a valid RandafEventTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRandafEventTypeAnyOfFromValue(v string) (*RandafEventTypeAnyOf, error) {
	ev := RandafEventTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RandafEventTypeAnyOf: valid values are %v", v, AllowedRandafEventTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RandafEventTypeAnyOf) IsValid() bool {
	for _, existing := range AllowedRandafEventTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RandafEventType_anyOf value
func (v RandafEventTypeAnyOf) Ptr() *RandafEventTypeAnyOf {
	return &v
}

type NullableRandafEventTypeAnyOf struct {
	value *RandafEventTypeAnyOf
	isSet bool
}

func (v NullableRandafEventTypeAnyOf) Get() *RandafEventTypeAnyOf {
	return v.value
}

func (v *NullableRandafEventTypeAnyOf) Set(val *RandafEventTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRandafEventTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRandafEventTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandafEventTypeAnyOf(val *RandafEventTypeAnyOf) *NullableRandafEventTypeAnyOf {
	return &NullableRandafEventTypeAnyOf{value: val, isSet: true}
}

func (v NullableRandafEventTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandafEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

