/*
Nrandaf_EventExposure

RANDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package randaf

import (
	"encoding/json"
	"time"
)

// RandafEventReport Represents a report triggered by a subscribed event type
type RandafEventReport struct {
	Type RandafEventTypeAnyOf `json:"type"`
	State RandafEventState `json:"state"`
	// string with format 'date-time' as defined in OpenAPI.
	TimeStamp time.Time `json:"timeStamp"`
	// String providing an URI formatted according to RFC 3986.
	SubscriptionId *string `json:"subscriptionId,omitempty"`
	PhyRANLevelInfos []PhyRANLevelInformation `json:"phyRANLevelInfos,omitempty"`
	GnbInfos []GnbInformation `json:"gnbInfos,omitempty"`
}

// NewRandafEventReport instantiates a new RandafEventReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandafEventReport(type_ RandafEventTypeAnyOf, state RandafEventState, timeStamp time.Time) *RandafEventReport {
	this := RandafEventReport{}
	this.Type = type_
	this.State = state
	this.TimeStamp = timeStamp
	return &this
}

// NewRandafEventReportWithDefaults instantiates a new RandafEventReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandafEventReportWithDefaults() *RandafEventReport {
	this := RandafEventReport{}
	return &this
}

// GetType returns the Type field value
func (o *RandafEventReport) GetType() RandafEventTypeAnyOf {
	if o == nil {
		var ret RandafEventTypeAnyOf
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RandafEventReport) GetTypeOk() (*RandafEventTypeAnyOf, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RandafEventReport) SetType(v RandafEventTypeAnyOf) {
	o.Type = v
}

// GetState returns the State field value
func (o *RandafEventReport) GetState() RandafEventState {
	if o == nil {
		var ret RandafEventState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *RandafEventReport) GetStateOk() (*RandafEventState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *RandafEventReport) SetState(v RandafEventState) {
	o.State = v
}

// GetTimeStamp returns the TimeStamp field value
func (o *RandafEventReport) GetTimeStamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *RandafEventReport) GetTimeStampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *RandafEventReport) SetTimeStamp(v time.Time) {
	o.TimeStamp = v
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *RandafEventReport) GetSubscriptionId() string {
	if o == nil || o.SubscriptionId == nil {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafEventReport) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || o.SubscriptionId == nil {
		return nil, false
	}
	return o.SubscriptionId, true
}

// HasSubscriptionId returns a boolean if a field has been set.
func (o *RandafEventReport) HasSubscriptionId() bool {
	if o != nil && o.SubscriptionId != nil {
		return true
	}

	return false
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *RandafEventReport) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

// GetPhyRANLevelInfos returns the PhyRANLevelInfos field value if set, zero value otherwise.
func (o *RandafEventReport) GetPhyRANLevelInfos() []PhyRANLevelInformation {
	if o == nil || o.PhyRANLevelInfos == nil {
		var ret []PhyRANLevelInformation
		return ret
	}
	return o.PhyRANLevelInfos
}

// GetPhyRANLevelInfosOk returns a tuple with the PhyRANLevelInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafEventReport) GetPhyRANLevelInfosOk() ([]PhyRANLevelInformation, bool) {
	// if o == nil || o.PhyRANLevelInfos == nil {
		if o == nil  {
		return nil, false
	}
	return o.PhyRANLevelInfos, true
}

// HasPhyRANLevelInfos returns a boolean if a field has been set.
func (o *RandafEventReport) HasPhyRANLevelInfos() bool {
	if o != nil && o.PhyRANLevelInfos != nil {
		return true
	}

	return false
}

// SetPhyRANLevelInfos gets a reference to the given []PhyRANLevelInformation and assigns it to the PhyRANLevelInfos field.
func (o *RandafEventReport) SetPhyRANLevelInfos(v []PhyRANLevelInformation) {
	o.PhyRANLevelInfos = v
}

// GetGnbInfos returns the GnbInfos field value if set, zero value otherwise.
func (o *RandafEventReport) GetGnbInfos() []GnbInformation {
	if o == nil || o.GnbInfos == nil {
		var ret []GnbInformation
		return ret
	}
	return o.GnbInfos
}

// GetGnbInfosOk returns a tuple with the GnbInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafEventReport) GetGnbInfosOk() ([]GnbInformation, bool) {
	if o == nil || o.GnbInfos == nil {
		return nil, false
	}
	return o.GnbInfos, true
}

// HasGnbInfos returns a boolean if a field has been set.
func (o *RandafEventReport) HasGnbInfos() bool {
	if o != nil && o.GnbInfos != nil {
		return true
	}

	return false
}

// SetGnbInfos gets a reference to the given []GnbInformation and assigns it to the GnbInfos field.
func (o *RandafEventReport) SetGnbInfos(v []GnbInformation) {
	o.GnbInfos = v
}

func (o RandafEventReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["timeStamp"] = o.TimeStamp
	}
	if o.SubscriptionId != nil {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	if o.PhyRANLevelInfos != nil {
		toSerialize["phyRANLevelInfos"] = o.PhyRANLevelInfos
	}
	if o.GnbInfos != nil {
		toSerialize["gnbInfos"] = o.GnbInfos
	}
	return json.Marshal(toSerialize)
}

type NullableRandafEventReport struct {
	value *RandafEventReport
	isSet bool
}

func (v NullableRandafEventReport) Get() *RandafEventReport {
	return v.value
}

func (v *NullableRandafEventReport) Set(val *RandafEventReport) {
	v.value = val
	v.isSet = true
}

func (v NullableRandafEventReport) IsSet() bool {
	return v.isSet
}

func (v *NullableRandafEventReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandafEventReport(val *RandafEventReport) *NullableRandafEventReport {
	return &NullableRandafEventReport{value: val, isSet: true}
}

func (v NullableRandafEventReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandafEventReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


