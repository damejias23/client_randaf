/*
Nrandaf_EventExposure

RANDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package randaf

import (
	"encoding/json"
)

// RandafCreatedEventSubscription Data within a create RANDAF event subscription response
type RandafCreatedEventSubscription struct {
	Subscription RandafEventSubscription `json:"subscription"`
	// String providing an URI formatted according to RFC 3986.
	SubscriptionId string `json:"subscriptionId"`
	ReportEvent *RandafEventReport `json:"reportEvent,omitempty"`
}

// NewRandafCreatedEventSubscription instantiates a new RandafCreatedEventSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandafCreatedEventSubscription(subscription RandafEventSubscription, subscriptionId string) *RandafCreatedEventSubscription {
	this := RandafCreatedEventSubscription{}
	this.Subscription = subscription
	this.SubscriptionId = subscriptionId
	return &this
}

// NewRandafCreatedEventSubscriptionWithDefaults instantiates a new RandafCreatedEventSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandafCreatedEventSubscriptionWithDefaults() *RandafCreatedEventSubscription {
	this := RandafCreatedEventSubscription{}
	return &this
}

// GetSubscription returns the Subscription field value
func (o *RandafCreatedEventSubscription) GetSubscription() RandafEventSubscription {
	if o == nil {
		var ret RandafEventSubscription
		return ret
	}

	return o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value
// and a boolean to check if the value has been set.
func (o *RandafCreatedEventSubscription) GetSubscriptionOk() (*RandafEventSubscription, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscription, true
}

// SetSubscription sets field value
func (o *RandafCreatedEventSubscription) SetSubscription(v RandafEventSubscription) {
	o.Subscription = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *RandafCreatedEventSubscription) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *RandafCreatedEventSubscription) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *RandafCreatedEventSubscription) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetReportEvent returns the ReportEvent field value if set, zero value otherwise.
func (o *RandafCreatedEventSubscription) GetReportEvent() RandafEventReport {
	if o == nil || o.ReportEvent == nil {
		var ret RandafEventReport
		return ret
	}
	return *o.ReportEvent
}

// GetReportEventOk returns a tuple with the ReportEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandafCreatedEventSubscription) GetReportEventOk() (*RandafEventReport, bool) {
	if o == nil || o.ReportEvent == nil {
		return nil, false
	}
	return o.ReportEvent, true
}

// HasReportEvent returns a boolean if a field has been set.
func (o *RandafCreatedEventSubscription) HasReportEvent() bool {
	if o != nil && o.ReportEvent != nil {
		return true
	}

	return false
}

// SetReportEvent gets a reference to the given RandafEventReport and assigns it to the ReportEvent field.
func (o *RandafCreatedEventSubscription) SetReportEvent(v RandafEventReport) {
	o.ReportEvent = &v
}

func (o RandafCreatedEventSubscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["subscription"] = o.Subscription
	}
	if true {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	if o.ReportEvent != nil {
		toSerialize["reportEvent"] = o.ReportEvent
	}
	return json.Marshal(toSerialize)
}

type NullableRandafCreatedEventSubscription struct {
	value *RandafCreatedEventSubscription
	isSet bool
}

func (v NullableRandafCreatedEventSubscription) Get() *RandafCreatedEventSubscription {
	return v.value
}

func (v *NullableRandafCreatedEventSubscription) Set(val *RandafCreatedEventSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableRandafCreatedEventSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableRandafCreatedEventSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandafCreatedEventSubscription(val *RandafCreatedEventSubscription) *NullableRandafCreatedEventSubscription {
	return &NullableRandafCreatedEventSubscription{value: val, isSet: true}
}

func (v NullableRandafCreatedEventSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandafCreatedEventSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


